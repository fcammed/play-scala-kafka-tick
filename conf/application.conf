# Secret key
# ~~~~~
play.http.secret.key="t/?3tSgq95J8ASF`f/e@>tDiHeHUmsiCLa>FV7P1aTyPc/a?P@AQiQ7/XLYWt;x["

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Kafka
producer.metadata.broker.list="localhost:9092"
zookeeper.connect="localhost:2181"
kafka.topic.name.tick="tick"
kafka.topic.name.event="pattern-event"

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=DEBUG
#INFO

# Logger provided to your application:
logger.application=DEBUG

# The Play akka
akka {
  loglevel="DEBUG"
}

#play.filters.enabled += "play.filters.headers.SecurityHeadersFilter"
play.filters.headers.contentSecurityPolicy=null
play.filters.disabled+=play.filters.csrf.CSRFFilter
play.filters.hosts {
  allowed = ["."]
}

# Runs Akka CoordinatedShutdown for Play's actor system
# from phase "service-stop". See Akka docs on Coordinated 
# Shutdown for other phase names. In Play, this defaults 
# to "actor-system-terminate"
play.akka.run-cs-from-phase = "service-stop"

# Overriding default-dispatcher
akka {
	actor {
		default-dispatcher = {
			fork-join-executor {
				parallelism-factor = 1.0 	#ceil(available processors * factor)
				parallelism-max = 24 		#upper cap
			}
		}
	}
}

blocking-pool {
  fork-join-executor {
    parallelism-min = 100
    parallelism-max = 100
  }
}

akka {
	actor {
		blocking-pool-otro = {
			fork-join-executor {
				parallelism-min = 100 		#lower cap starting with parallelism-factor of 1
				parallelism-max = 100 		#upper cap starting with parallelism-factor of 1
			}
		}
	}
}


# akka {
  # actor {
    # default-dispatcher {
      # # This will be used if you have set "executor = "fork-join-executor""
      # fork-join-executor {
        # # Min number of threads to cap factor-based parallelism number to
        # parallelism-min = 8

        # # The parallelism factor is used to determine thread pool size using the
        # # following formula: ceil(available processors * factor). Resulting size
        # # is then bounded by the parallelism-min and parallelism-max values.
        # parallelism-factor = 3.0

        # # Max number of threads to cap factor-based parallelism number to
        # parallelism-max = 64

        # # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
        # # like peeking mode which "pop".
        # task-peeking-mode = "FIFO"
      # }
    # }
  # }
# }